// Package client provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package client

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
	"time"
)

// AggregatedSlowQueryLog defines model for AggregatedSlowQueryLog.
type AggregatedSlowQueryLog struct {
	DatabaseName        string  `json:"databaseName"`
	ExaminedMaxRows     int64   `json:"examinedMaxRows"`
	ExaminedTotalRows   int64   `json:"examinedTotalRows"`
	ExecMaxTimeSecond   float64 `json:"execMaxTimeSecond"`
	ExecTotalCount      int64   `json:"execTotalCount"`
	ExecTotalTimeSecond float64 `json:"execTotalTimeSecond"`
	Id                  string  `json:"id"`
	LockMaxTimeSecond   float64 `json:"lockMaxTimeSecond"`
	LockTotalTimeSecond float64 `json:"lockTotalTimeSecond"`
	SentMaxRows         int64   `json:"sentMaxRows"`
	SentTotalRows       int64   `json:"sentTotalRows"`
	SqlText             string  `json:"sqlText"`
	Time                string  `json:"time"`
}

// Backup defines model for Backup.
type Backup struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	BackupSize             *int64                  `json:"backupSize,omitempty"`
	BackupStorageInterface *BackupStorageInterface `json:"backupStorageInterface,omitempty"`
	BackupStrategy         BackupStrategy          `json:"backupStrategy"`
	BackupType             *string                 `json:"backupType,omitempty"`
	ClusterName            string                  `json:"clusterName"`
	ClusterUuid            string                  `json:"clusterUuid"`
	DatabaseRole           string                  `json:"databaseRole"`
	DatabaseType           DatabaseType            `json:"databaseType"`
	InstanceUuid           string                  `json:"instanceUuid"`
	Name                   string                  `json:"name"`
	Namespace              *string                 `json:"namespace,omitempty"`
	Status                 BackupStatus            `json:"status"`
}

// BackupSet defines model for BackupSet.
type BackupSet struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	BackupId        *string   `json:"backupId,omitempty"`
	BackupMethod    string    `json:"backupMethod"`
	BackupUuid      string    `json:"backupUuid"`
	ClusterName     *string   `json:"clusterName,omitempty"`
	ClusterUuid     *string   `json:"clusterUuid,omitempty"`
	ElapseTime      int       `json:"elapseTime"`
	EndTime         time.Time `json:"endTime"`
	ExpireDuration  *string   `json:"expireDuration,omitempty"`
	FullBackupSetId string    `json:"fullBackupSetId"`
	InstanceUuid    string    `json:"instanceUuid"`
	Message         string    `json:"message"`
	Size            int64     `json:"size"`
	StartTime       time.Time `json:"startTime"`
	Status          string    `json:"status"`
}

// BackupStatus defines model for BackupStatus.
type BackupStatus struct {
	Active           bool      `json:"active"`
	EndPointInTime   time.Time `json:"endPointInTime"`
	Failed           int       `json:"failed"`
	LastScheduleTime time.Time `json:"lastScheduleTime"`
	SizeBytes        int64     `json:"sizeBytes"`
	StartPointInTime time.Time `json:"startPointInTime"`
	State            string    `json:"state"`
	Success          int       `json:"success"`
}

// BackupStorageInterface defines model for BackupStorageInterface.
type BackupStorageInterface struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	Kind *string `json:"kind,omitempty"`
	// Embedded fields due to inline allOf schema
	Nas *NAS `json:"nas,omitempty"`
	// Embedded fields due to inline allOf schema
	S3 *S3 `json:"s3,omitempty"`
}

// BackupStorageInterfaceStatus defines model for BackupStorageInterfaceStatus.
type BackupStorageInterfaceStatus struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}

// BackupStrategy defines model for BackupStrategy.
type BackupStrategy struct {
	BackupSetExpireDuration      *string          `json:"backupSetExpireDuration,omitempty"`
	BinlogRetentionDays          int              `json:"binlogRetentionDays"`
	FullBackupSchedule           string           `json:"fullBackupSchedule"`
	FullBackupSetRetentionNumber int              `json:"fullBackupSetRetentionNumber"`
	IncrementalBackupSchedule    string           `json:"incrementalBackupSchedule"`
	Kind                         string           `json:"kind"`
	RetentionPolicy              *RetentionPolicy `json:"retentionPolicy,omitempty"`
}

// ClusterCreationOptions defines model for ClusterCreationOptions.
type ClusterCreationOptions struct {
	AppName               *string                `json:"appName,omitempty"`
	BackupRetentionPolicy *RetentionPolicy       `json:"backupRetentionPolicy,omitempty"`
	BackupSize            *int64                 `json:"backupSize,omitempty"`
	BackupType            *string                `json:"backupType,omitempty"`
	ClusterName           *string                `json:"clusterName,omitempty"`
	DataSize              *int64                 `json:"dataSize,omitempty"`
	DatabaseImageUuid     *string                `json:"databaseImageUuid,omitempty"`
	DatabaseRestoreSource *DatabaseRestoreSource `json:"databaseRestoreSource,omitempty"`
	EcTenantID            *string                `json:"ecTenantID,omitempty"`
	InstanceOfferingUuid  *string                `json:"instanceOfferingUuid,omitempty"`
	IopsQuota             *int64                 `json:"iopsQuota,omitempty"`
	LogSize               *int64                 `json:"logSize,omitempty"`
	MasterReplica         *int                   `json:"masterReplica,omitempty"`
	RedoSize              *int64                 `json:"redoSize,omitempty"`
	ResourceUseType       *string                `json:"resourceUseType,omitempty"`
	ServiceIP             *string                `json:"serviceIP,omitempty"`
	ServicePort           *int                   `json:"servicePort,omitempty"`
	ServiceType           *string                `json:"serviceType,omitempty"`
	SlaveReplica          *int                   `json:"slaveReplica,omitempty"`
	StorageType           *string                `json:"storageType,omitempty"`
	ZoneList              *string                `json:"zoneList,omitempty"`
}

// ClusterOperationState defines model for ClusterOperationState.
type ClusterOperationState string

// ClusterOverview defines model for ClusterOverview.
type ClusterOverview struct {
	Alias           *string      `json:"alias,omitempty"`
	AuditLogActive  *bool        `json:"auditLogActive,omitempty"`
	ClusterType     *ClusterType `json:"clusterType,omitempty"`
	CreateDate      *time.Time   `json:"createDate,omitempty"`
	DataSizeBytes   *int         `json:"dataSizeBytes,omitempty"`
	Image           *Image       `json:"image,omitempty"`
	IopsQuota       *int         `json:"iopsQuota,omitempty"`
	LogSizeBytes    *int         `json:"logSizeBytes,omitempty"`
	MasterReplica   *int         `json:"masterReplica,omitempty"`
	Name            *string      `json:"name,omitempty"`
	Namespace       *string      `json:"namespace,omitempty"`
	Offering        *Offering    `json:"offering,omitempty"`
	RedoSizeBytes   *int         `json:"redoSizeBytes,omitempty"`
	ResourceUseType *string      `json:"resourceUseType,omitempty"`
	ServicePort     *int         `json:"servicePort,omitempty"`
	SlavePort       *int         `json:"slavePort,omitempty"`
	SlaveReplica    *int         `json:"slaveReplica,omitempty"`
	StorageType     *string      `json:"storageType,omitempty"`
	Uuid            *string      `json:"uuid,omitempty"`
}

// ClusterResourceOverview defines model for ClusterResourceOverview.
type ClusterResourceOverview struct {
	BackupSet *struct {
		Error *int `json:"error,omitempty"`
		Size  *int `json:"size,omitempty"`
		Total *int `json:"total,omitempty"`
	} `json:"backupSet,omitempty"`
	Cpu *struct {
		Allocatable *int `json:"allocatable,omitempty"`
		Available   *int `json:"available,omitempty"`
		Total       *int `json:"total,omitempty"`
		Used        *int `json:"used,omitempty"`
	} `json:"cpu,omitempty"`
	DatabaseInstance *struct {
		Error   *int `json:"error,omitempty"`
		Running *int `json:"running,omitempty"`
		Total   *int `json:"total,omitempty"`
	} `json:"databaseInstance,omitempty"`
	Memory *struct {
		Allocatable *int `json:"allocatable,omitempty"`
		Available   *int `json:"available,omitempty"`
		Total       *int `json:"total,omitempty"`
		Used        *int `json:"used,omitempty"`
	} `json:"memory,omitempty"`
	Proxy *struct {
		Error   *int `json:"error,omitempty"`
		Running *int `json:"running,omitempty"`
		Total   *int `json:"total,omitempty"`
	} `json:"proxy,omitempty"`
	Storage *struct {
		AvailableBytes *int    `json:"availableBytes,omitempty"`
		CapacityBytes  *int    `json:"capacityBytes,omitempty"`
		Name           *string `json:"name,omitempty"`
		Provider       *string `json:"provider,omitempty"`
	} `json:"storage,omitempty"`
	WorkNode *struct {
		Error   *int `json:"error,omitempty"`
		Running *int `json:"running,omitempty"`
		Total   *int `json:"total,omitempty"`
	} `json:"workNode,omitempty"`
}

// ClusterStatus defines model for ClusterStatus.
type ClusterStatus string

// ClusterType defines model for ClusterType.
type ClusterType string

// DatabaseAccount defines model for DatabaseAccount.
type DatabaseAccount struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	ClusterUuid *string      `json:"clusterUuid,omitempty"`
	Deleted     *time.Time   `json:"deleted,omitempty"`
	Description *string      `json:"description,omitempty"`
	Level       *string      `json:"level,omitempty"`
	Name        *string      `json:"name,omitempty"`
	Password    *string      `json:"password,omitempty"`
	Schemas     *[]Privilege `json:"schemas,omitempty"`
	Status      *string      `json:"status,omitempty"`
}

// DatabaseAccountOptions defines model for DatabaseAccountOptions.
type DatabaseAccountOptions struct {
	Comments    *string      `json:"comments,omitempty"`
	Description *string      `json:"description,omitempty"`
	Level       *string      `json:"level,omitempty"`
	Name        *string      `json:"name,omitempty"`
	Password    *string      `json:"password,omitempty"`
	Privileges  *[]Privilege `json:"privileges,omitempty"`
}

// DatabaseInstance defines model for DatabaseInstance.
type DatabaseInstance struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	ClusterUuid   string            `json:"clusterUuid"`
	DataSizeBytes *int              `json:"dataSizeBytes,omitempty"`
	DatabaseType  DatabaseType      `json:"databaseType"`
	Image         Image             `json:"image"`
	IopsQuota     *int              `json:"iopsQuota,omitempty"`
	LogSizeBytes  int               `json:"logSizeBytes"`
	Name          string            `json:"name"`
	Namespace     string            `json:"namespace"`
	Offering      Offering          `json:"offering"`
	RedoSizeBytes int               `json:"redoSizeBytes"`
	Role          MysqlDatabaseRole `json:"role"`
}

// DatabaseInstanceDetail defines model for DatabaseInstanceDetail.
type DatabaseInstanceDetail struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	HostIp                  *string            `json:"HostIp,omitempty"`
	Alias                   *string            `json:"alias,omitempty"`
	AppName                 *string            `json:"appName,omitempty"`
	BackupDays              *int               `json:"backupDays,omitempty"`
	BinlogExpireDays        *int               `json:"binlogExpireDays,omitempty"`
	BinlogReserveFiles      *int               `json:"binlogReserveFiles,omitempty"`
	BinlogReservePercentage *int               `json:"binlogReservePercentage,omitempty"`
	ClusterUuid             *string            `json:"clusterUuid,omitempty"`
	ConfigName              *string            `json:"configName,omitempty"`
	DataSize                *int64             `json:"dataSize,omitempty"`
	DatabaseType            *DatabaseType      `json:"databaseType,omitempty"`
	Description             *string            `json:"description,omitempty"`
	ImageUuid               *string            `json:"imageUuid,omitempty"`
	InstanceOfferingUuid    *string            `json:"instanceOfferingUuid,omitempty"`
	LogSize                 *int64             `json:"logSize,omitempty"`
	MaxConnection           *int               `json:"maxConnection,omitempty"`
	Name                    *string            `json:"name,omitempty"`
	NodeName                *string            `json:"nodeName,omitempty"`
	PodIp                   *string            `json:"podIp,omitempty"`
	RedoSize                *int               `json:"redoSize,omitempty"`
	Role                    *MysqlDatabaseRole `json:"role,omitempty"`
	Status                  *ClusterStatus     `json:"status,omitempty"`
	Vip                     *string            `json:"vip,omitempty"`
}

// DatabasePrivilegeValidation defines model for DatabasePrivilegeValidation.
type DatabasePrivilegeValidation struct {
	Connection struct {
		DatabaseHost    string  `json:"databaseHost"`
		DatabaseName    string  `json:"databaseName"`
		DatabasePort    string  `json:"databasePort"`
		MonitorPassword string  `json:"monitorPassword"`
		MonitorUsername string  `json:"monitorUsername"`
		Sid             *string `json:"sid,omitempty"`
	} `json:"connection"`
	DatabaseType DatabaseType `json:"databaseType"`
	Status       *struct {
		PrivilegeValidation *struct {
			Reason  *string `json:"Reason,omitempty"`
			Success *bool   `json:"success,omitempty"`
		} `json:"privilegeValidation,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseRestoreRequest defines model for DatabaseRestoreRequest.
type DatabaseRestoreRequest struct {
	BackupSetUuid string       `json:"backupSetUuid"`
	BackupSize    *int64       `json:"backupSize,omitempty"`
	BackupUuid    string       `json:"backupUuid"`
	ClusterName   string       `json:"clusterName"`
	DataSizeBytes string       `json:"dataSizeBytes"`
	DatabaseType  DatabaseType `json:"databaseType"`
	IopsQuota     int          `json:"iopsQuota"`
	Kind          *string      `json:"kind,omitempty"`
	LogSizeBytes  string       `json:"logSizeBytes"`
	OfferingUuid  string       `json:"offeringUuid"`
	PointInTime   *time.Time   `json:"pointInTime,omitempty"`
}

// DatabaseSchema defines model for DatabaseSchema.
type DatabaseSchema struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	Accounts *[]struct {
		AccountName *string `json:"accountName,omitempty"`
		Privilege   *string `json:"privilege,omitempty"`
	} `json:"accounts,omitempty"`
	CharacterSet *SchemaCharacterSet `json:"characterSet,omitempty"`
	ClusterUuid  *string             `json:"clusterUuid,omitempty"`
	Deleted      *time.Time          `json:"deleted,omitempty"`
	Description  *string             `json:"description,omitempty"`
	Name         *string             `json:"name,omitempty"`
	Status       *string             `json:"status,omitempty"`
}

// DatabaseTarget defines model for DatabaseTarget.
type DatabaseTarget struct {
	CreateDate   *time.Time   `json:"createDate,omitempty"`
	DatabaseType DatabaseType `json:"databaseType"`
	LastOpDate   *time.Time   `json:"lastOpDate,omitempty"`
	Spec         struct {
		DatabaseHost    string  `json:"databaseHost"`
		DatabaseName    string  `json:"databaseName"`
		DatabasePort    string  `json:"databasePort"`
		MonitorPassword string  `json:"monitorPassword"`
		MonitorUsername string  `json:"monitorUsername"`
		Role            *string `json:"role,omitempty"`
		Sid             *string `json:"sid,omitempty"`
		Version         *string `json:"version,omitempty"`
	} `json:"spec"`
	Status *struct {
		Scrape *string `json:"scrape,omitempty"`
		Up     *string `json:"up,omitempty"`
	} `json:"status,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// DatabaseType defines model for DatabaseType.
type DatabaseType string

// DatabaseVolume defines model for DatabaseVolume.
type DatabaseVolume struct {
	DataVolume   *DatabaseVolumeCapacity `json:"dataVolume,omitempty"`
	DatabaseUuid *string                 `json:"databaseUuid,omitempty"`
	LogVolume    *DatabaseVolumeCapacity `json:"logVolume,omitempty"`
}

// DatabaseVolumeCapacity defines model for DatabaseVolumeCapacity.
type DatabaseVolumeCapacity struct {
	Size *int64 `json:"size,omitempty"`
	Used *int64 `json:"used,omitempty"`
}

// Departments defines model for Departments.
type Departments struct {
	UserCount                *int       `json:"UserCount,omitempty"`
	AliasName                *string    `json:"aliasName,omitempty"`
	BackupStorageInterfaceId *string    `json:"backupStorageInterfaceId,omitempty"`
	CpuQuota                 *int       `json:"cpuQuota,omitempty"`
	CreateDate               *time.Time `json:"createDate,omitempty"`
	Department               *string    `json:"department,omitempty"`
	DiskQuota                *int       `json:"diskQuota,omitempty"`
	IopsQuota                *int       `json:"iopsQuota,omitempty"`
	LastCheckTime            *time.Time `json:"lastCheckTime,omitempty"`
	LastOpDate               *time.Time `json:"lastOpDate,omitempty"`
	MemoryQuota              *int       `json:"memoryQuota,omitempty"`
	Name                     *string    `json:"name,omitempty"`
	Uuid                     *string    `json:"uuid,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int64       `json:"code,omitempty"`
	Data    *interface{} `json:"data,omitempty"`
	Message string       `json:"message"`
	Success *bool        `json:"success,omitempty"`
}

// Event defines model for Event.
type Event struct {
	BelongUser  *string    `json:"belongUser,omitempty"`
	ClusterUuid *string    `json:"clusterUuid,omitempty"`
	CreateDate  *time.Time `json:"createDate,omitempty"`
	Description *string    `json:"description,omitempty"`
	Ip          *string    `json:"ip,omitempty"`
	Req         *string    `json:"req,omitempty"`
	Resp        *string    `json:"resp,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Uuid        *string    `json:"uuid,omitempty"`
}

// EventCreateOptions defines model for EventCreateOptions.
type EventCreateOptions struct {
	ClusterUuid *string    `json:"clusterUuid,omitempty"`
	CreateDate  *time.Time `json:"createDate,omitempty"`
	Description *string    `json:"description,omitempty"`
	Req         *string    `json:"req,omitempty"`
	Resp        *string    `json:"resp,omitempty"`
	Status      *string    `json:"status,omitempty"`
}

// Image defines model for Image.
type Image struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	Description string `json:"description"`
	ImageBranch string `json:"imageBranch"`
	ImageTag    string `json:"imageTag"`
	ImageType   string `json:"imageType"`
	Name        string `json:"name"`
	Repository  string `json:"repository"`
}

// K8sNodeInfo defines model for K8sNodeInfo.
type K8sNodeInfo struct {
	Labels *K8sNodeInfo_Labels `json:"labels,omitempty"`
}

// K8sNodeInfo_Labels defines model for K8sNodeInfo.Labels.
type K8sNodeInfo_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// K8sResourceOverview defines model for K8sResourceOverview.
type K8sResourceOverview struct {
	LocalStorage *K8sResourceOverview_LocalStorage `json:"localStorage,omitempty"`
	NodeInfo     *K8sResourceOverview_NodeInfo     `json:"nodeInfo,omitempty"`
	NodeResource *K8sResourceOverview_NodeResource `json:"nodeResource,omitempty"`
}

// K8sResourceOverview_LocalStorage defines model for K8sResourceOverview.LocalStorage.
type K8sResourceOverview_LocalStorage struct {
	AdditionalProperties map[string]StorageOverview `json:"-"`
}

// K8sResourceOverview_NodeInfo defines model for K8sResourceOverview.NodeInfo.
type K8sResourceOverview_NodeInfo struct {
	AdditionalProperties map[string]K8sNodeInfo `json:"-"`
}

// K8sResourceOverview_NodeResource defines model for K8sResourceOverview.NodeResource.
type K8sResourceOverview_NodeResource struct {
	AdditionalProperties map[string]ResourcesQuota `json:"-"`
}

// LicenseInfo defines model for LicenseInfo.
type LicenseInfo struct {
	CpuNum      *int    `json:"cpuNum,omitempty"`
	CpuUseNum   *int    `json:"cpuUseNum,omitempty"`
	Description *string `json:"description,omitempty"`
	LimitMonth  *int    `json:"limitMonth,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreateDate time.Time `json:"createDate"`
	LastOpDate time.Time `json:"lastOpDate"`
	Uuid       string    `json:"uuid"`
}

// MssqlClusterCreationStrategy defines model for MssqlClusterCreationStrategy.
type MssqlClusterCreationStrategy string

// MssqlClusterOverview defines model for MssqlClusterOverview.
type MssqlClusterOverview struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterOverview)
	ClusterOverview
	// Embedded fields due to inline allOf schema
	BelongUser    *string                       `json:"belongUser,omitempty"`
	Description   *string                       `json:"description,omitempty"`
	MaxConnection *int                          `json:"maxConnection,omitempty"`
	Status        *string                       `json:"status,omitempty"`
	Strategy      *MssqlClusterCreationStrategy `json:"strategy,omitempty"`
}

// MssqlClusterUpdateOptions defines model for MssqlClusterUpdateOptions.
type MssqlClusterUpdateOptions struct {
	AssignToNode         *string                       `json:"assignToNode,omitempty"`
	BackupSize           *int64                        `json:"backupSize,omitempty"`
	BackupType           *string                       `json:"backupType,omitempty"`
	BinlogExpireDays     *int                          `json:"binlogExpireDays,omitempty"`
	ClusterName          *string                       `json:"clusterName,omitempty"`
	DataSize             *int64                        `json:"dataSize,omitempty"`
	ForceMaster          *string                       `json:"forceMaster,omitempty"`
	InstanceOfferingUuid *string                       `json:"instanceOfferingUuid,omitempty"`
	IopsQuota            *int64                        `json:"iopsQuota,omitempty"`
	IsMaster             *bool                         `json:"isMaster,omitempty"`
	LogSize              *int                          `json:"logSize,omitempty"`
	MasterReplica        *int                          `json:"masterReplica,omitempty"`
	MaxConnection        *int                          `json:"maxConnection,omitempty"`
	Operator             *ClusterOperationState        `json:"operator,omitempty"`
	OperatorInstance     *string                       `json:"operatorInstance,omitempty"`
	ResourceUseType      *string                       `json:"resourceUseType,omitempty"`
	ServiceIP            *string                       `json:"serviceIP,omitempty"`
	ServicePort          *int                          `json:"servicePort,omitempty"`
	SlaveReplica         *int                          `json:"slaveReplica,omitempty"`
	StorageType          *string                       `json:"storageType,omitempty"`
	Strategy             *MssqlClusterCreationStrategy `json:"strategy,omitempty"`
	ZoneList             *string                       `json:"zoneList,omitempty"`
}

// MssqlCreationOptions defines model for MssqlCreationOptions.
type MssqlCreationOptions struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterCreationOptions)
	ClusterCreationOptions
	// Embedded fields due to inline allOf schema
	BackupBinlog  *bool                         `json:"backupBinlog,omitempty"`
	MaxConnection *int                          `json:"maxConnection,omitempty"`
	MssqlPid      *string                       `json:"mssqlPid,omitempty"`
	Strategy      *MssqlClusterCreationStrategy `json:"strategy,omitempty"`
}

// MssqlSchemaOptions defines model for MssqlSchemaOptions.
type MssqlSchemaOptions struct {
	CharacterSet *string `json:"characterSet,omitempty"`
	Description  *string `json:"description,omitempty"`
	Level        *string `json:"level,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// MySQLAuditLog defines model for MySQLAuditLog.
type MySQLAuditLog struct {
	CommandClass   SQLCommandClass `json:"commandClass"`
	ConnectionId   string          `json:"connectionId"`
	Db             string          `json:"db"`
	ExecTimeSecond *float64        `json:"execTimeSecond,omitempty"`
	Host           string          `json:"host"`
	Id             string          `json:"id"`
	Ip             string          `json:"ip"`
	RowsSent       *int64          `json:"rowsSent,omitempty"`
	SqlText        string          `json:"sqlText"`
	Success        bool            `json:"success"`
	Timestamp      string          `json:"timestamp"`
	User           string          `json:"user"`
}

// MySQLErrorLog defines model for MySQLErrorLog.
type MySQLErrorLog struct {
	Data string    `json:"data"`
	Id   string    `json:"id"`
	Time time.Time `json:"time"`
}

// MySQLSwitchMasterLog defines model for MySQLSwitchMasterLog.
type MySQLSwitchMasterLog struct {
	Description string `json:"description"`
	Id          string `json:"id"`
	Time        string `json:"time"`
}

// MysqlClusterConfig defines model for MysqlClusterConfig.
type MysqlClusterConfig struct {
	Description  *string `json:"Description,omitempty"`
	DefaultValue *string `json:"defaultValue,omitempty"`
	Name         *string `json:"name,omitempty"`
	NeedRestart  *string `json:"needRestart,omitempty"`
	Range        *string `json:"range,omitempty"`
	Type         *string `json:"type,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// MysqlClusterConfigOptionItem defines model for MysqlClusterConfigOptionItem.
type MysqlClusterConfigOptionItem struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// MysqlClusterConfigOptions defines model for MysqlClusterConfigOptions.
type MysqlClusterConfigOptions struct {
	Config *[]MysqlClusterConfigOptionItem `json:"config,omitempty"`
}

// MysqlClusterCreationOptions defines model for MysqlClusterCreationOptions.
type MysqlClusterCreationOptions struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterCreationOptions)
	ClusterCreationOptions
	// Embedded fields due to inline allOf schema
	BackupBinlog  *bool                         `json:"backupBinlog,omitempty"`
	MaxConnection *int                          `json:"maxConnection,omitempty"`
	Strategy      *MysqlClusterCreationStrategy `json:"strategy,omitempty"`
}

// MysqlClusterCreationStrategy defines model for MysqlClusterCreationStrategy.
type MysqlClusterCreationStrategy string

// MysqlClusterOverview defines model for MysqlClusterOverview.
type MysqlClusterOverview struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterOverview)
	ClusterOverview
	// Embedded fields due to inline allOf schema
	BelongUser    *string                       `json:"belongUser,omitempty"`
	Description   *string                       `json:"description,omitempty"`
	MaxConnection *int                          `json:"maxConnection,omitempty"`
	ProxyVip      *string                       `json:"proxyVip,omitempty"`
	SlbIp         *[]string                     `json:"slbIp,omitempty"`
	Status        *string                       `json:"status,omitempty"`
	Strategy      *MysqlClusterCreationStrategy `json:"strategy,omitempty"`
	SyncMode      *string                       `json:"syncMode,omitempty"`
	TdeActive     *bool                         `json:"tdeActive,omitempty"`
}

// MysqlClusterTopology defines model for MysqlClusterTopology.
type MysqlClusterTopology struct {
	Master *MysqlInstanceOverview   `json:"master,omitempty"`
	Slaves *[]MysqlInstanceOverview `json:"slaves,omitempty"`
}

// MysqlClusterUpdateOptions defines model for MysqlClusterUpdateOptions.
type MysqlClusterUpdateOptions struct {
	AssignToNode         *string                       `json:"assignToNode,omitempty"`
	AuditLogActive       *bool                         `json:"auditLogActive,omitempty"`
	BackupSize           *int64                        `json:"backupSize,omitempty"`
	BackupType           *string                       `json:"backupType,omitempty"`
	BinlogExpireDays     *int                          `json:"binlogExpireDays,omitempty"`
	ClusterName          *string                       `json:"clusterName,omitempty"`
	DataSize             *int64                        `json:"dataSize,omitempty"`
	EcTenantID           *string                       `json:"ecTenantID,omitempty"`
	ForceMaster          *string                       `json:"forceMaster,omitempty"`
	InstanceOfferingUuid *string                       `json:"instanceOfferingUuid,omitempty"`
	IopsQuota            *int64                        `json:"iopsQuota,omitempty"`
	IsMaster             *bool                         `json:"isMaster,omitempty"`
	LogSize              *int64                        `json:"logSize,omitempty"`
	MasterReplica        *int                          `json:"masterReplica,omitempty"`
	MaxConnection        *int                          `json:"maxConnection,omitempty"`
	Operator             *ClusterOperationState        `json:"operator,omitempty"`
	OperatorInstance     *string                       `json:"operatorInstance,omitempty"`
	ResourceUseType      *string                       `json:"resourceUseType,omitempty"`
	ServiceIP            *string                       `json:"serviceIP,omitempty"`
	ServicePort          *int                          `json:"servicePort,omitempty"`
	ServiceType          *string                       `json:"serviceType,omitempty"`
	SlaveReplica         *int                          `json:"slaveReplica,omitempty"`
	StorageType          *string                       `json:"storageType,omitempty"`
	Strategy             *MysqlClusterCreationStrategy `json:"strategy,omitempty"`
	SyncMode             *string                       `json:"syncMode,omitempty"`
	TdeActive            *bool                         `json:"tdeActive,omitempty"`
	ZoneList             *string                       `json:"zoneList,omitempty"`
}

// MysqlDatabaseConfig defines model for MysqlDatabaseConfig.
type MysqlDatabaseConfig struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	ClusterUuid *string            `json:"clusterUuid,omitempty"`
	Data        *string            `json:"data,omitempty"`
	Description *string            `json:"description,omitempty"`
	IsDefault   *bool              `json:"isDefault,omitempty"`
	IsUsed      *bool              `json:"isUsed,omitempty"`
	Name        *string            `json:"name,omitempty"`
	Role        *MysqlDatabaseRole `json:"role,omitempty"`
	Type        *string            `json:"type,omitempty"`
}

// MysqlDatabaseConfigUpdateOptions defines model for MysqlDatabaseConfigUpdateOptions.
type MysqlDatabaseConfigUpdateOptions struct {
	Data   *string `json:"data,omitempty"`
	IsUsed *bool   `json:"isUsed,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// MysqlDatabaseRole defines model for MysqlDatabaseRole.
type MysqlDatabaseRole string

// MysqlInstanceOverview defines model for MysqlInstanceOverview.
type MysqlInstanceOverview struct {
	InstanceName *string `json:"instanceName,omitempty"`
	NodeName     *string `json:"nodeName,omitempty"`
	SlaveDelay   *int    `json:"slaveDelay,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// MysqlProxy defines model for MysqlProxy.
type MysqlProxy struct {
	ClsuterUuid          *string        `json:"clsuterUuid,omitempty"`
	ClusterName          *string        `json:"clusterName,omitempty"`
	CpuNum               *int           `json:"cpuNum,omitempty"`
	CreateDate           *time.Time     `json:"createDate,omitempty"`
	InstanceOfferingName *string        `json:"instanceOfferingName,omitempty"`
	InstanceOfferingUuid *string        `json:"instanceOfferingUuid,omitempty"`
	MaxConnection        *int           `json:"maxConnection,omitempty"`
	MemorySize           *int           `json:"memorySize,omitempty"`
	Name                 *string        `json:"name,omitempty"`
	ProxyVip             *string        `json:"proxyVip,omitempty"`
	RootCA               *string        `json:"rootCA,omitempty"`
	ServiceNodePort      *int           `json:"serviceNodePort,omitempty"`
	ServicePort          *int           `json:"servicePort,omitempty"`
	SlaveDelayThreshold  *int           `json:"slaveDelayThreshold,omitempty"`
	SlbIp                *[]string      `json:"slbIp,omitempty"`
	Status               *ClusterStatus `json:"status,omitempty"`
	UseSSL               *string        `json:"useSSL,omitempty"`
	Uuid                 *string        `json:"uuid,omitempty"`
}

// MysqlProxyOptions defines model for MysqlProxyOptions.
type MysqlProxyOptions struct {
	ClusterUuid          *string                `json:"clusterUuid,omitempty"`
	DatabaseImageUuid    *string                `json:"databaseImageUuid,omitempty"`
	EcTenantID           *string                `json:"ecTenantID,omitempty"`
	InstanceOfferingUuid *string                `json:"instanceOfferingUuid,omitempty"`
	Operator             *ClusterOperationState `json:"operator,omitempty"`
	ProxyMaxConnection   *int                   `json:"proxyMaxConnection,omitempty"`
	ProxyPort            *int                   `json:"proxyPort,omitempty"`
	ProxyType            *string                `json:"proxyType,omitempty"`
	ServerListConfig     *[]ServerList          `json:"serverListConfig,omitempty"`
	ServiceIP            *string                `json:"serviceIP,omitempty"`
	ServiceType          *string                `json:"serviceType,omitempty"`
	SlaveDelayThreshold  *int                   `json:"slaveDelayThreshold,omitempty"`
	UseSSL               *string                `json:"useSSL,omitempty"`
}

// MysqlSchemaOptions defines model for MysqlSchemaOptions.
type MysqlSchemaOptions struct {
	CharacterSet *SchemaCharacterSet `json:"characterSet,omitempty"`
	Description  *string             `json:"description,omitempty"`
	Name         *string             `json:"name,omitempty"`
}

// MysqlSlowQueryLog defines model for MysqlSlowQueryLog.
type MysqlSlowQueryLog struct {
	AvgLockWaitTime      *float32 `json:"avgLockWaitTime,omitempty"`
	AvgQueryDelay        *float32 `json:"avgQueryDelay,omitempty"`
	DatabaseInstanceName *string  `json:"databaseInstanceName,omitempty"`
	DatabaseInstanceUuid *string  `json:"databaseInstanceUuid,omitempty"`
	TotalDelayTime       *float32 `json:"totalDelayTime,omitempty"`
	TotalExecCount       *string  `json:"totalExecCount,omitempty"`
	TotalLockWaitTime    *float32 `json:"totalLockWaitTime,omitempty"`
	TotalSqlCount        *string  `json:"totalSqlCount,omitempty"`
}

// NAS defines model for NAS.
type NAS struct {
	Address    string  `json:"address"`
	BackupPath string  `json:"backupPath"`
	Name       string  `json:"name"`
	Password   *string `json:"password,omitempty"`
	Port       int     `json:"port"`
	Protocol   string  `json:"protocol"`
	Username   *string `json:"username,omitempty"`
}

// Namespace defines model for Namespace.
type Namespace struct {
	CreateTime     *time.Time `json:"createTime,omitempty"`
	Name           *string    `json:"name,omitempty"`
	ResourcesQuota *struct {
		Cpu *struct {
			Limit   *int `json:"limit,omitempty"`
			Request *int `json:"request,omitempty"`
		} `json:"cpu,omitempty"`
		Memory *struct {
			Limit   *int `json:"limit,omitempty"`
			Request *int `json:"request,omitempty"`
		} `json:"memory,omitempty"`
	} `json:"resourcesQuota,omitempty"`
	Status *string `json:"status,omitempty"`
}

// Network defines model for Network.
type Network struct {
	AddressDistribution *[]struct {
		Ip      *string `json:"ip,omitempty"`
		Service *string `json:"service,omitempty"`
	} `json:"addressDistribution,omitempty"`
	Addresses   []NetworkAddress `json:"addresses"`
	CreateDate  *time.Time       `json:"createDate,omitempty"`
	Description *string          `json:"description,omitempty"`
	LastOpDate  *time.Time       `json:"lastOpDate,omitempty"`
	Name        string           `json:"name"`
	Uuid        *string          `json:"uuid,omitempty"`
}

// NetworkAddress defines model for NetworkAddress.
type NetworkAddress struct {
	Allocation *struct {
		Total *int `json:"total,omitempty"`
		Used  *int `json:"used,omitempty"`
	} `json:"allocation,omitempty"`
	Begin   string  `json:"begin"`
	End     string  `json:"end"`
	Gateway string  `json:"gateway"`
	Netmask string  `json:"netmask"`
	Uuid    *string `json:"uuid,omitempty"`
}

// Offering defines model for Offering.
type Offering struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	CpuNum          int    `json:"cpuNum"`
	Description     string `json:"description"`
	MemorySizeBytes int    `json:"memorySizeBytes"`
	Name            string `json:"name"`
}

// OracleAccount defines model for OracleAccount.
type OracleAccount struct {
	// Embedded struct due to allOf(#/components/schemas/DatabaseAccount)
	DatabaseAccount
	// Embedded fields due to inline allOf schema
	OracleSID *string `json:"oracleSID,omitempty"`
}

// OracleClusterCreationOptions defines model for OracleClusterCreationOptions.
type OracleClusterCreationOptions struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterCreationOptions)
	ClusterCreationOptions
	// Embedded fields due to inline allOf schema
	OracleSid   *string `json:"oracleSid,omitempty"`
	Strategy    *string `json:"strategy,omitempty"`
	UseHugePage *bool   `json:"useHugePage,omitempty"`
}

// OracleClusterCreationStrategy defines model for OracleClusterCreationStrategy.
type OracleClusterCreationStrategy string

// OracleClusterOverview defines model for OracleClusterOverview.
type OracleClusterOverview struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterOverview)
	ClusterOverview
	// Embedded fields due to inline allOf schema
	Description *string                        `json:"description,omitempty"`
	ProxyVip    *string                        `json:"proxyVip,omitempty"`
	Status      *string                        `json:"status,omitempty"`
	Strategy    *OracleClusterCreationStrategy `json:"strategy,omitempty"`
}

// OracleClusterUpdateOptions defines model for OracleClusterUpdateOptions.
type OracleClusterUpdateOptions struct {
	ClusterName          *string                `json:"clusterName,omitempty"`
	DataSize             *int                   `json:"dataSize,omitempty"`
	InstanceOfferingUuid *string                `json:"instanceOfferingUuid,omitempty"`
	IsMaster             *bool                  `json:"isMaster,omitempty"`
	LogSize              *int                   `json:"logSize,omitempty"`
	Operator             *ClusterOperationState `json:"operator,omitempty"`
	ServicePort          *int                   `json:"servicePort,omitempty"`
	SlaveReplica         *int                   `json:"slaveReplica,omitempty"`
}

// OracleDatabaseAccountUpdateOptions defines model for OracleDatabaseAccountUpdateOptions.
type OracleDatabaseAccountUpdateOptions struct {
	CharacterSet *string      `json:"characterSet,omitempty"`
	Comments     *string      `json:"comments,omitempty"`
	Description  *string      `json:"description,omitempty"`
	Name         *string      `json:"name,omitempty"`
	Password     *string      `json:"password,omitempty"`
	Privileges   *[]Privilege `json:"privileges,omitempty"`
}

// OracleSchema defines model for OracleSchema.
type OracleSchema struct {
	CharacterSet *string `json:"characterSet,omitempty"`
	Description  *string `json:"description,omitempty"`
	Name         *string `json:"name,omitempty"`
	OracleSID    *string `json:"oracleSID,omitempty"`
	Uuid         *string `json:"uuid,omitempty"`
}

// Page defines model for Page.
type Page struct {
	Count     int `json:"count"`
	PageNum   int `json:"pageNum"`
	PageSize  int `json:"pageSize"`
	PageTotal int `json:"pageTotal"`
}

// PersistentVolume defines model for PersistentVolume.
type PersistentVolume struct {
	AccessMode *string `json:"accessMode,omitempty"`
	Capacity   *struct {
		Size *struct {
			Value *int `json:"value,omitempty"`
		} `json:"size,omitempty"`
	} `json:"capacity,omitempty"`
	ClusterUuid *string      `json:"clusterUuid,omitempty"`
	CreateDate  *time.Time   `json:"createDate,omitempty"`
	DbType      *ClusterType `json:"dbType,omitempty"`
	Instance    *string      `json:"instance,omitempty"`
	Name        *string      `json:"name,omitempty"`
	Status      *string      `json:"status,omitempty"`
	Used        *struct {
		Size *struct {
			Value *int `json:"value,omitempty"`
		} `json:"size,omitempty"`
	} `json:"used,omitempty"`
	VolumeType *string `json:"volumeType,omitempty"`
}

// PodStatus defines model for PodStatus.
type PodStatus string

// Privilege defines model for Privilege.
type Privilege struct {
	Privilege *SchemaPrivilege `json:"privilege,omitempty"`
	Schema    *string          `json:"schema,omitempty"`
}

// Quota defines model for Quota.
type Quota struct {
	Limit   *int64 `json:"limit,omitempty"`
	Request *int64 `json:"request,omitempty"`
	Total   *int64 `json:"total,omitempty"`
}

// ResourceType defines model for ResourceType.
type ResourceType string

// ResourcesQuota defines model for ResourcesQuota.
type ResourcesQuota struct {
	Cpu    *Quota `json:"cpu,omitempty"`
	Memory *Quota `json:"memory,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// S3 defines model for S3.
type S3 struct {
	AwsAccessKeyId     string `json:"awsAccessKeyId"`
	AwsSecretAccessKey string `json:"awsSecretAccessKey"`
	Description        string `json:"description"`
	Host               string `json:"host"`
	Name               string `json:"name"`
	Port               int    `json:"port"`
}

// SQLCommandClass defines model for SQLCommandClass.
type SQLCommandClass string

// SchemaCharacterSet defines model for SchemaCharacterSet.
type SchemaCharacterSet string

// SchemaPrivilege defines model for SchemaPrivilege.
type SchemaPrivilege string

// ServerList defines model for ServerList.
type ServerList struct {
	Server *string `json:"server,omitempty"`
	Weight *string `json:"weight,omitempty"`
}

// SlowQueryLog defines model for SlowQueryLog.
type SlowQueryLog struct {
	DatabaseName     string    `json:"databaseName"`
	Host             string    `json:"host"`
	Id               string    `json:"id"`
	LockTimeSeconds  float32   `json:"lockTimeSeconds"`
	QueryTimeSeconds float32   `json:"queryTimeSeconds"`
	RowsExamined     int64     `json:"rowsExamined"`
	RowsSend         int64     `json:"rowsSend"`
	SqlText          string    `json:"sqlText"`
	StartTime        time.Time `json:"startTime"`
}

// StorageClass defines model for StorageClass.
type StorageClass struct {
	AllowSingleInstance *bool                `json:"allowSingleInstance,omitempty"`
	CreateTime          *time.Time           `json:"createTime,omitempty"`
	Labels              *StorageClass_Labels `json:"labels,omitempty"`
	Name                *string              `json:"name,omitempty"`
	Provider            *string              `json:"provider,omitempty"`
}

// StorageClass_Labels defines model for StorageClass.Labels.
type StorageClass_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// StorageOverview defines model for StorageOverview.
type StorageOverview struct {
	AvailableBytes *int64  `json:"availableBytes,omitempty"`
	CapacityBytes  *int64  `json:"capacityBytes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Provider       *string `json:"provider,omitempty"`
}

// TagParam defines model for TagParam.
type TagParam struct {
	Tag *[]interface{} `json:"tag,omitempty"`
}

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	AliasName                *string `json:"aliasName,omitempty"`
	BackupStorageInterfaceId *string `json:"backupStorageInterfaceId,omitempty"`
	CpuQuota                 *int64  `json:"cpuQuota,omitempty"`
	DataSize                 *int64  `json:"dataSize,omitempty"`
	Department               *string `json:"department,omitempty"`
	Description              *string `json:"description,omitempty"`
	DiskQuota                *int64  `json:"diskQuota,omitempty"`
	Email                    *string `json:"email,omitempty"`
	IopsQuota                *int64  `json:"iopsQuota,omitempty"`
	LogSize                  *int64  `json:"logSize,omitempty"`
	MemoryQuota              *int    `json:"memoryQuota,omitempty"`
	Name                     *string `json:"name,omitempty"`
	ParentId                 *string `json:"parentId,omitempty"`
	Password                 *string `json:"password,omitempty"`
	PhoneNumber              *string `json:"phoneNumber,omitempty"`
	UserType                 *string `json:"userType,omitempty"`
}

// UserList defines model for UserList.
type UserList struct {
	// Embedded struct due to allOf(#/components/schemas/Metadata)
	Metadata
	// Embedded fields due to inline allOf schema
	Kind *string `json:"kind,omitempty"`
	// Embedded fields due to inline allOf schema
}

// Users defines model for Users.
type Users struct {
	AliasName   *string    `json:"aliasName,omitempty"`
	CpuQuota    *int       `json:"cpuQuota,omitempty"`
	CreateDate  *time.Time `json:"createDate,omitempty"`
	DataSize    *int       `json:"dataSize,omitempty"`
	Department  *string    `json:"department,omitempty"`
	Description *string    `json:"description,omitempty"`
	Email       *string    `json:"email,omitempty"`
	IopsQuota   *int       `json:"iopsQuota,omitempty"`
	LastOpDate  *time.Time `json:"lastOpDate,omitempty"`
	LogSize     *int       `json:"logSize,omitempty"`
	MemoryQuota *int       `json:"memoryQuota,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PhoneNumber *string    `json:"phoneNumber,omitempty"`
	UserType    *string    `json:"userType,omitempty"`
	Uuid        *string    `json:"uuid,omitempty"`
}

// WhiteListPage defines model for WhiteListPage.
type WhiteListPage struct {
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
	// Embedded fields due to inline allOf schema
	Items *[]Whitelist `json:"items,omitempty"`
}

// Whitelist defines model for Whitelist.
type Whitelist struct {
	Cidr string `json:"cidr"`
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

// WhitelistOption defines model for WhitelistOption.
type WhitelistOption struct {
	Cidr *string `json:"cidr,omitempty"`
	Name *string `json:"name,omitempty"`
}

// WorkNode defines model for WorkNode.
type WorkNode struct {
	Cpu        *int             `json:"cpu,omitempty"`
	CreateTime *time.Time       `json:"createTime,omitempty"`
	Ip         *string          `json:"ip,omitempty"`
	Labels     *WorkNode_Labels `json:"labels,omitempty"`
	Memory     *int             `json:"memory,omitempty"`
	Name       *string          `json:"name,omitempty"`
	Status     *string          `json:"status,omitempty"`
}

// WorkNode_Labels defines model for WorkNode.Labels.
type WorkNode_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// WorkNodeResource defines model for WorkNodeResource.
type WorkNodeResource struct {
	Pods *[]struct {
		Cpu          *int               `json:"cpu,omitempty"`
		CreateTime   *time.Time         `json:"createTime,omitempty"`
		Memory       *int               `json:"memory,omitempty"`
		Name         *string            `json:"name,omitempty"`
		RestartTimes *int               `json:"restartTimes,omitempty"`
		Role         *MysqlDatabaseRole `json:"role,omitempty"`
		StartTime    *time.Time         `json:"startTime,omitempty"`
		Status       *PodStatus         `json:"status,omitempty"`
		Type         *ResourceType      `json:"type,omitempty"`
		UpdateTime   *time.Time         `json:"updateTime,omitempty"`
	} `json:"pods,omitempty"`
}

// DatabaseRestoreSource defines model for databaseRestoreSource.
type DatabaseRestoreSource struct {
	BackupSetUuid *string    `json:"backupSetUuid,omitempty"`
	ClusterUuid   string     `json:"clusterUuid"`
	Kind          string     `json:"kind"`
	PointInTime   *time.Time `json:"pointInTime,omitempty"`
}

// RetentionPolicy defines model for retentionPolicy.
type RetentionPolicy string

// PageNum defines model for pageNum.
type PageNum int

// PageSize defines model for pageSize.
type PageSize int

// CreateStorageInterfaceJSONBody defines parameters for CreateStorageInterface.
type CreateStorageInterfaceJSONBody BackupStorageInterface

// GetStorageInterfaceByUuidJSONBody defines parameters for GetStorageInterfaceByUuid.
type GetStorageInterfaceByUuidJSONBody BackupStorageInterface

// ListClusterWhitelistParams defines parameters for ListClusterWhitelist.
type ListClusterWhitelistParams struct {

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// CreateClusterWhitelistJSONBody defines parameters for CreateClusterWhitelist.
type CreateClusterWhitelistJSONBody WhitelistOption

// UpdateClusterWhitelistJSONBody defines parameters for UpdateClusterWhitelist.
type UpdateClusterWhitelistJSONBody WhitelistOption

// UpdateClusterWhitelistParams defines parameters for UpdateClusterWhitelist.
type UpdateClusterWhitelistParams struct {

	// if append
	Append *string `json:"append,omitempty"`
}

// CreateContainerShellParams defines parameters for CreateContainerShell.
type CreateContainerShellParams struct {

	// pod名称
	Pod *string `json:"pod,omitempty"`

	// 命名空间
	Namespace *string `json:"namespace,omitempty"`

	// 容器名称
	Container *string `json:"container,omitempty"`

	// 执行的命令
	Command *string `json:"command,omitempty"`
}

// CreateDatabaseTargetJSONBody defines parameters for CreateDatabaseTarget.
type CreateDatabaseTargetJSONBody DatabaseTarget

// ValidateMonitorUserPrivilegeJSONBody defines parameters for ValidateMonitorUserPrivilege.
type ValidateMonitorUserPrivilegeJSONBody DatabasePrivilegeValidation

// UpdateDatabaseTargetByUuidJSONBody defines parameters for UpdateDatabaseTargetByUuid.
type UpdateDatabaseTargetByUuidJSONBody DatabaseTarget

// UpdateDatetimeJSONBody defines parameters for UpdateDatetime.
type UpdateDatetimeJSONBody struct {
	Ntpserver string `json:"ntpserver"`
}

// CreateEventJSONBody defines parameters for CreateEvent.
type CreateEventJSONBody EventCreateOptions

// ListEventPageParams defines parameters for ListEventPage.
type ListEventPageParams struct {

	// 用户id(查询自己的不用指定这个参数)
	UserId string `json:"user_id"`

	// 集群ID
	ClusterId string `json:"cluster_id"`

	// 传时间戳
	StartTime string `json:"startTime"`
	EndTime   string `json:"endTime"`

	// 根据操作描述筛选操作日志
	Description *string `json:"description,omitempty"`

	// 根据操作结果筛选操作日志
	Status *string `json:"status,omitempty"`

	// 根据操作员筛选操作日志
	UserName *string `json:"user_name,omitempty"`

	// 排序方向
	SortType *string `json:"sortType,omitempty"`

	// 排序的字段
	SortField *string `json:"sortField,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// CreateNetworkJSONBody defines parameters for CreateNetwork.
type CreateNetworkJSONBody Network

// CreateNetworkAddressJSONBody defines parameters for CreateNetworkAddress.
type CreateNetworkAddressJSONBody NetworkAddress

// GetLicenseParams defines parameters for GetLicense.
type GetLicenseParams struct {

	// 检查License是否合法，则上送true，否则不传表示查询License信息
	Check *string `json:"check,omitempty"`
}

// UpdateLicenseJSONBody defines parameters for UpdateLicense.
type UpdateLicenseJSONBody struct {
	Data *string `json:"data,omitempty"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
}

// ListMySQLAggregatedSlowQueryLogParams defines parameters for ListMySQLAggregatedSlowQueryLog.
type ListMySQLAggregatedSlowQueryLogParams struct {

	// 集群的uuid
	ClusterUuid string `json:"clusterUuid"`

	// 数据库名列表，用逗号分隔
	Databases *string `json:"databases,omitempty"`

	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`

	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// ListMySQLErrorLogParams defines parameters for ListMySQLErrorLog.
type ListMySQLErrorLogParams struct {

	// 集群的uuid
	ClusterUuid string `json:"clusterUuid"`

	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`

	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// ListMySQLSlowQueryLogParams defines parameters for ListMySQLSlowQueryLog.
type ListMySQLSlowQueryLogParams struct {

	// 集群的uuid
	ClusterUuid string `json:"clusterUuid"`

	// 数据库名列表，用逗号分隔
	Databases *string `json:"databases,omitempty"`

	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`

	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// ListMssqlClsutersParams defines parameters for ListMssqlClsuters.
type ListMssqlClsutersParams struct {

	// 排序条件
	SortBy *string `json:"sort_by,omitempty"`

	// 按照标签过滤
	Tag *string `json:"tag,omitempty"`
}

// CreateMssqlClusterJSONBody defines parameters for CreateMssqlCluster.
type CreateMssqlClusterJSONBody MssqlCreationOptions

// CreateMssqlSchemaJSONBody defines parameters for CreateMssqlSchema.
type CreateMssqlSchemaJSONBody MssqlSchemaOptions

// DeleteMssqlClusterByUuidParams defines parameters for DeleteMssqlClusterByUuid.
type DeleteMssqlClusterByUuidParams struct {

	// 是否保留备份数据
	DeleteBackup *bool `json:"deleteBackup,omitempty"`
}

// UpdateMssqlClusterByUuidJSONBody defines parameters for UpdateMssqlClusterByUuid.
type UpdateMssqlClusterByUuidJSONBody MssqlClusterUpdateOptions

// ListMysqlClusterParams defines parameters for ListMysqlCluster.
type ListMysqlClusterParams struct {

	// 过滤条件
	Filter *string `json:"filter,omitempty"`

	// 排序条件
	SortBy *string `json:"sort_by,omitempty"`

	// 按照标签过滤
	Tag *string `json:"tag,omitempty"`
}

// CreateMysqlClusterJSONBody defines parameters for CreateMysqlCluster.
type CreateMysqlClusterJSONBody MysqlClusterCreationOptions

// UpdateMysqlClusterConfigJSONBody defines parameters for UpdateMysqlClusterConfig.
type UpdateMysqlClusterConfigJSONBody MysqlClusterConfigOptions

// CreateMysqlSchemaJSONBody defines parameters for CreateMysqlSchema.
type CreateMysqlSchemaJSONBody MysqlSchemaOptions

// DeleteMysqlClsuterByUuidParams defines parameters for DeleteMysqlClsuterByUuid.
type DeleteMysqlClsuterByUuidParams struct {

	// 是否保留备份数据
	DeleteBackup *bool `json:"deleteBackup,omitempty"`
}

// UpdateClusterByUuidJSONBody defines parameters for UpdateClusterByUuid.
type UpdateClusterByUuidJSONBody MysqlClusterUpdateOptions

// CreateMysqlConfigJSONBody defines parameters for CreateMysqlConfig.
type CreateMysqlConfigJSONBody MysqlDatabaseConfig

// UpdateMysqlConfigByUuidJSONBody defines parameters for UpdateMysqlConfigByUuid.
type UpdateMysqlConfigByUuidJSONBody MysqlDatabaseConfigUpdateOptions

// ListMySQLAuditLogParams defines parameters for ListMySQLAuditLog.
type ListMySQLAuditLogParams struct {

	// 集群的uuid
	ClusterUuid string `json:"clusterUuid"`

	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`

	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`

	// 数据库名称，如果有多个用逗号分隔
	Db *string `json:"db,omitempty"`

	// 数据库用户名，如果有多个用逗号分隔
	User *string `json:"user,omitempty"`

	// sql类型
	Class *SQLCommandClass `json:"class,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// ListMySQLSwitchMasterLogParams defines parameters for ListMySQLSwitchMasterLog.
type ListMySQLSwitchMasterLogParams struct {

	// 集群的uuid
	ClusterUuid string `json:"clusterUuid"`

	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`

	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`
}

// CreateMysqlProxyJSONBody defines parameters for CreateMysqlProxy.
type CreateMysqlProxyJSONBody MysqlProxyOptions

// UpdateMySQLProxyByUuidJSONBody defines parameters for UpdateMySQLProxyByUuid.
type UpdateMySQLProxyByUuidJSONBody MysqlProxyOptions

// CreateMysqlProxyAccountJSONBody defines parameters for CreateMysqlProxyAccount.
type CreateMysqlProxyAccountJSONBody DatabaseAccountOptions

// UpdateMysqlProxyAccountJSONBody defines parameters for UpdateMysqlProxyAccount.
type UpdateMysqlProxyAccountJSONBody DatabaseAccountOptions

// ListOracleClusterParams defines parameters for ListOracleCluster.
type ListOracleClusterParams struct {

	// 排序条件
	SortBy *string `json:"sort_by,omitempty"`

	// 按照标签过滤
	Tag *string `json:"tag,omitempty"`
}

// CreateOracleClusterJSONBody defines parameters for CreateOracleCluster.
type CreateOracleClusterJSONBody OracleClusterCreationOptions

// UpdateOracleAccountJSONBody defines parameters for UpdateOracleAccount.
type UpdateOracleAccountJSONBody OracleDatabaseAccountUpdateOptions

// UpdateOracleClusterByUuidJSONBody defines parameters for UpdateOracleClusterByUuid.
type UpdateOracleClusterByUuidJSONBody OracleClusterUpdateOptions

// CreateDepartmentReportJSONBody defines parameters for CreateDepartmentReport.
type CreateDepartmentReportJSONBody struct {
	Uuid string `json:"uuid"`
}

// CreateSystemReportJSONBody defines parameters for CreateSystemReport.
type CreateSystemReportJSONBody struct {
	EndTime   *time.Time `json:"endTime,omitempty"`
	StartTime *time.Time `json:"startTime,omitempty"`
}

// PutApiV1TagClusterUuidJSONBody defines parameters for PutApiV1TagClusterUuid.
type PutApiV1TagClusterUuidJSONBody TagParam

// ListUsersJSONBody defines parameters for ListUsers.
type ListUsersJSONBody struct {
	MenuType *string `json:"menuType,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody User

// UpdateUserByUuidJSONBody defines parameters for UpdateUserByUuid.
type UpdateUserByUuidJSONBody User

// ListPersistentVolumesParams defines parameters for ListPersistentVolumes.
type ListPersistentVolumesParams struct {

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`

	// 排序方向
	SortType *string `json:"sortType,omitempty"`

	// 排序的字段
	SortField *string `json:"sortField,omitempty"`
}

// ListWorkNodesParams defines parameters for ListWorkNodes.
type ListWorkNodesParams struct {

	// 排序条件
	SortBy *string `json:"sort_by,omitempty"`
}

// ListClusterBackupSetsParams defines parameters for ListClusterBackupSets.
type ListClusterBackupSetsParams struct {

	// 页大小
	PageSize *PageSize `json:"pageSize,omitempty"`

	// 页号
	PageNum *PageNum `json:"pageNum,omitempty"`

	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`

	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`

	// 集群的uuid
	ClusterUuid *string `json:"clusterUuid,omitempty"`
}

// CreateFullBackupJobJSONBody defines parameters for CreateFullBackupJob.
type CreateFullBackupJobJSONBody struct {
	BackupUuid     string  `json:"backupUuid"`
	ExpireDuration *string `json:"expireDuration,omitempty"`
}

// CreateRestoresJSONBody defines parameters for CreateRestores.
type CreateRestoresJSONBody DatabaseRestoreRequest

// ListBackupSetsParams defines parameters for ListBackupSets.
type ListBackupSetsParams struct {

	// 基于时间点恢复的时间点
	PointInTime *time.Time `json:"pointInTime,omitempty"`
}

// UpdateBackupByUuidJSONBody defines parameters for UpdateBackupByUuid.
type UpdateBackupByUuidJSONBody Backup

// CreateDatabaseAccountJSONBody defines parameters for CreateDatabaseAccount.
type CreateDatabaseAccountJSONBody DatabaseAccountOptions

// UpdateDatabaseAccountJSONBody defines parameters for UpdateDatabaseAccount.
type UpdateDatabaseAccountJSONBody DatabaseAccountOptions

// CreateStorageInterfaceRequestBody defines body for CreateStorageInterface for application/json ContentType.
type CreateStorageInterfaceJSONRequestBody CreateStorageInterfaceJSONBody

// GetStorageInterfaceByUuidRequestBody defines body for GetStorageInterfaceByUuid for application/json ContentType.
type GetStorageInterfaceByUuidJSONRequestBody GetStorageInterfaceByUuidJSONBody

// CreateClusterWhitelistRequestBody defines body for CreateClusterWhitelist for application/json ContentType.
type CreateClusterWhitelistJSONRequestBody CreateClusterWhitelistJSONBody

// UpdateClusterWhitelistRequestBody defines body for UpdateClusterWhitelist for application/json ContentType.
type UpdateClusterWhitelistJSONRequestBody UpdateClusterWhitelistJSONBody

// CreateDatabaseTargetRequestBody defines body for CreateDatabaseTarget for application/json ContentType.
type CreateDatabaseTargetJSONRequestBody CreateDatabaseTargetJSONBody

// ValidateMonitorUserPrivilegeRequestBody defines body for ValidateMonitorUserPrivilege for application/json ContentType.
type ValidateMonitorUserPrivilegeJSONRequestBody ValidateMonitorUserPrivilegeJSONBody

// UpdateDatabaseTargetByUuidRequestBody defines body for UpdateDatabaseTargetByUuid for application/json ContentType.
type UpdateDatabaseTargetByUuidJSONRequestBody UpdateDatabaseTargetByUuidJSONBody

// UpdateDatetimeRequestBody defines body for UpdateDatetime for application/json ContentType.
type UpdateDatetimeJSONRequestBody UpdateDatetimeJSONBody

// CreateEventRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody CreateEventJSONBody

// CreateNetworkRequestBody defines body for CreateNetwork for application/json ContentType.
type CreateNetworkJSONRequestBody CreateNetworkJSONBody

// CreateNetworkAddressRequestBody defines body for CreateNetworkAddress for application/json ContentType.
type CreateNetworkAddressJSONRequestBody CreateNetworkAddressJSONBody

// UpdateLicenseRequestBody defines body for UpdateLicense for application/json ContentType.
type UpdateLicenseJSONRequestBody UpdateLicenseJSONBody

// LoginUserRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// CreateMssqlClusterRequestBody defines body for CreateMssqlCluster for application/json ContentType.
type CreateMssqlClusterJSONRequestBody CreateMssqlClusterJSONBody

// CreateMssqlSchemaRequestBody defines body for CreateMssqlSchema for application/json ContentType.
type CreateMssqlSchemaJSONRequestBody CreateMssqlSchemaJSONBody

// UpdateMssqlClusterByUuidRequestBody defines body for UpdateMssqlClusterByUuid for application/json ContentType.
type UpdateMssqlClusterByUuidJSONRequestBody UpdateMssqlClusterByUuidJSONBody

// CreateMysqlClusterRequestBody defines body for CreateMysqlCluster for application/json ContentType.
type CreateMysqlClusterJSONRequestBody CreateMysqlClusterJSONBody

// UpdateMysqlClusterConfigRequestBody defines body for UpdateMysqlClusterConfig for application/json ContentType.
type UpdateMysqlClusterConfigJSONRequestBody UpdateMysqlClusterConfigJSONBody

// CreateMysqlSchemaRequestBody defines body for CreateMysqlSchema for application/json ContentType.
type CreateMysqlSchemaJSONRequestBody CreateMysqlSchemaJSONBody

// UpdateClusterByUuidRequestBody defines body for UpdateClusterByUuid for application/json ContentType.
type UpdateClusterByUuidJSONRequestBody UpdateClusterByUuidJSONBody

// CreateMysqlConfigRequestBody defines body for CreateMysqlConfig for application/json ContentType.
type CreateMysqlConfigJSONRequestBody CreateMysqlConfigJSONBody

// UpdateMysqlConfigByUuidRequestBody defines body for UpdateMysqlConfigByUuid for application/json ContentType.
type UpdateMysqlConfigByUuidJSONRequestBody UpdateMysqlConfigByUuidJSONBody

// CreateMysqlProxyRequestBody defines body for CreateMysqlProxy for application/json ContentType.
type CreateMysqlProxyJSONRequestBody CreateMysqlProxyJSONBody

// UpdateMySQLProxyByUuidRequestBody defines body for UpdateMySQLProxyByUuid for application/json ContentType.
type UpdateMySQLProxyByUuidJSONRequestBody UpdateMySQLProxyByUuidJSONBody

// CreateMysqlProxyAccountRequestBody defines body for CreateMysqlProxyAccount for application/json ContentType.
type CreateMysqlProxyAccountJSONRequestBody CreateMysqlProxyAccountJSONBody

// UpdateMysqlProxyAccountRequestBody defines body for UpdateMysqlProxyAccount for application/json ContentType.
type UpdateMysqlProxyAccountJSONRequestBody UpdateMysqlProxyAccountJSONBody

// CreateOracleClusterRequestBody defines body for CreateOracleCluster for application/json ContentType.
type CreateOracleClusterJSONRequestBody CreateOracleClusterJSONBody

// UpdateOracleAccountRequestBody defines body for UpdateOracleAccount for application/json ContentType.
type UpdateOracleAccountJSONRequestBody UpdateOracleAccountJSONBody

// UpdateOracleClusterByUuidRequestBody defines body for UpdateOracleClusterByUuid for application/json ContentType.
type UpdateOracleClusterByUuidJSONRequestBody UpdateOracleClusterByUuidJSONBody

// CreateDepartmentReportRequestBody defines body for CreateDepartmentReport for application/json ContentType.
type CreateDepartmentReportJSONRequestBody CreateDepartmentReportJSONBody

// CreateSystemReportRequestBody defines body for CreateSystemReport for application/json ContentType.
type CreateSystemReportJSONRequestBody CreateSystemReportJSONBody

// PutApiV1TagClusterUuidRequestBody defines body for PutApiV1TagClusterUuid for application/json ContentType.
type PutApiV1TagClusterUuidJSONRequestBody PutApiV1TagClusterUuidJSONBody

// ListUsersRequestBody defines body for ListUsers for application/json ContentType.
type ListUsersJSONRequestBody ListUsersJSONBody

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserByUuidRequestBody defines body for UpdateUserByUuid for application/json ContentType.
type UpdateUserByUuidJSONRequestBody UpdateUserByUuidJSONBody

// CreateFullBackupJobRequestBody defines body for CreateFullBackupJob for application/json ContentType.
type CreateFullBackupJobJSONRequestBody CreateFullBackupJobJSONBody

// CreateRestoresRequestBody defines body for CreateRestores for application/json ContentType.
type CreateRestoresJSONRequestBody CreateRestoresJSONBody

// UpdateBackupByUuidRequestBody defines body for UpdateBackupByUuid for application/json ContentType.
type UpdateBackupByUuidJSONRequestBody UpdateBackupByUuidJSONBody

// CreateDatabaseAccountRequestBody defines body for CreateDatabaseAccount for application/json ContentType.
type CreateDatabaseAccountJSONRequestBody CreateDatabaseAccountJSONBody

// UpdateDatabaseAccountRequestBody defines body for UpdateDatabaseAccount for application/json ContentType.
type UpdateDatabaseAccountJSONRequestBody UpdateDatabaseAccountJSONBody

// Getter for additional properties for K8sNodeInfo_Labels. Returns the specified
// element and whether it was found
func (a K8sNodeInfo_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for K8sNodeInfo_Labels
func (a *K8sNodeInfo_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for K8sNodeInfo_Labels to handle AdditionalProperties
func (a *K8sNodeInfo_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for K8sNodeInfo_Labels to handle AdditionalProperties
func (a K8sNodeInfo_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for K8sResourceOverview_LocalStorage. Returns the specified
// element and whether it was found
func (a K8sResourceOverview_LocalStorage) Get(fieldName string) (value StorageOverview, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for K8sResourceOverview_LocalStorage
func (a *K8sResourceOverview_LocalStorage) Set(fieldName string, value StorageOverview) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]StorageOverview)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for K8sResourceOverview_LocalStorage to handle AdditionalProperties
func (a *K8sResourceOverview_LocalStorage) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]StorageOverview)
		for fieldName, fieldBuf := range object {
			var fieldVal StorageOverview
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for K8sResourceOverview_LocalStorage to handle AdditionalProperties
func (a K8sResourceOverview_LocalStorage) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for K8sResourceOverview_NodeInfo. Returns the specified
// element and whether it was found
func (a K8sResourceOverview_NodeInfo) Get(fieldName string) (value K8sNodeInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for K8sResourceOverview_NodeInfo
func (a *K8sResourceOverview_NodeInfo) Set(fieldName string, value K8sNodeInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]K8sNodeInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for K8sResourceOverview_NodeInfo to handle AdditionalProperties
func (a *K8sResourceOverview_NodeInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]K8sNodeInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal K8sNodeInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for K8sResourceOverview_NodeInfo to handle AdditionalProperties
func (a K8sResourceOverview_NodeInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for K8sResourceOverview_NodeResource. Returns the specified
// element and whether it was found
func (a K8sResourceOverview_NodeResource) Get(fieldName string) (value ResourcesQuota, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for K8sResourceOverview_NodeResource
func (a *K8sResourceOverview_NodeResource) Set(fieldName string, value ResourcesQuota) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ResourcesQuota)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for K8sResourceOverview_NodeResource to handle AdditionalProperties
func (a *K8sResourceOverview_NodeResource) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ResourcesQuota)
		for fieldName, fieldBuf := range object {
			var fieldVal ResourcesQuota
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for K8sResourceOverview_NodeResource to handle AdditionalProperties
func (a K8sResourceOverview_NodeResource) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StorageClass_Labels. Returns the specified
// element and whether it was found
func (a StorageClass_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StorageClass_Labels
func (a *StorageClass_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StorageClass_Labels to handle AdditionalProperties
func (a *StorageClass_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StorageClass_Labels to handle AdditionalProperties
func (a StorageClass_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WorkNode_Labels. Returns the specified
// element and whether it was found
func (a WorkNode_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WorkNode_Labels
func (a *WorkNode_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WorkNode_Labels to handle AdditionalProperties
func (a *WorkNode_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WorkNode_Labels to handle AdditionalProperties
func (a WorkNode_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
